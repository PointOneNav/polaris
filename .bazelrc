# Cross-compilation configurations (e.g., bazel build --config=aarch64).
build:armv7hf --crosstool_top=//compilers:toolchain
build:armv7hf --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:armv7hf --cpu=armeabi-v7a --compiler=gcc
build:armv7hf --spawn_strategy=local
build:armv7hf --platforms=//compilers:arm_none_linux

build:aarch64 --crosstool_top=//compilers:toolchain
build:aarch64 --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:aarch64 --cpu=aarch64-linux-gnu --compiler=gcc
build:aarch64 --spawn_strategy=local
build:aarch64 --platforms=//compilers:aarch64_none_linux

# Command-line argument aliases (requires Bazel 3.7.0 or newer).
#
# For example, you may specify:
#    bazel build -c opt --polaris_enable_tls=False //:polaris_client
# instead of:
#    bazel build -c opt --//c:polaris_enable_tls=False //:polaris_client
#build --flag_alias=polaris_enable_tls=//c:polaris_enable_tls

# Enable address sanitizer (ASAN).
#
# When using, you may also wish to disable optimizations (`-c dbg` or
# `--copt=-O0`). This may significantly impact performance, but may be
# necessary to pinpoint certain errors in highly optimized sections of code.
build:asan --copt=-g --copt=-fsanitize=address --linkopt=-fsanitize=address --linkopt=-static-libasan
